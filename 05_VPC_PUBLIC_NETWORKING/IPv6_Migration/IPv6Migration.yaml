AWSTemplateFormatVersion: "2010-09-09"
Description: "A4L IPv6 Migration Demo"
Parameters:
  VPCCIDR: 
    Type: "String"
    Description: "IP Address range for the VPC"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.0.0/16"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  RESERVEDACIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-Reserved-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.0.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  DBACIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-DB-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.16.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PRIVACIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-PRIV-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.32.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PUBACIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-PUB-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.48.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  RESERVEDBCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-Reserved-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.64.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  DBBCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-DB-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.80.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PRIVBCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-PRIV-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.96.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PUBBCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-PUB-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.112.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  RESERVEDCCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-Reserved-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.128.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  DBCCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-DB-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.144.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PRIVCCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-PRIV-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.160.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PUBCCIDR: 
    Type: "String"
    Description: "IP Address range for A4L-SN-PUB-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "10.16.176.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  AddSSMEndpoints:
    Type: "String"
    Description: "Create SSM Endpoints for public and private instance management"
    AllowedValues:
      - true
    Default: true
  LatestAmiId:
    Description: AMI for any EC2 Instances (if applicable) (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  Ubuntu16AmiId:
    Description: Ubuntu 16 AMI for any EC2 Instances (if applicable)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/16.04/stable/20210429/arm64/hvm/ebs-gp2/ami-id'
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label:
          default: "VPC Configuration"
        Parameters:
          - VPCCIDR
      - 
        Label:
          default: "AZA"
        Parameters:
          - RESERVEDACIDR
          - DBACIDR
          - PRIVACIDR
          - PUBACIDR
      - 
        Label:
          default: "AZB"
        Parameters:
          - RESERVEDBCIDR
          - DBBCIDR
          - PRIVBCIDR
          - PUBBCIDR
      - 
        Label:
          default: "AZC"
        Parameters:
          - RESERVEDCCIDR
          - DBCCIDR
          - PRIVCCIDR
          - PUBCCIDR
Conditions:
  CreateSSMEndpoints: !Equals
    - !Ref AddSSMEndpoints
    - true
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-VPC"
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-IGW"
  IGWAttachments:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  SubnetReservedA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref RESERVEDACIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-Reserved-A"
  SubnetDBA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref DBACIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-DB-A"
  SubnetPrivA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PRIVACIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-PRIV-A"
  SubnetPubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PUBACIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-PUB-A"
  SubnetReservedB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref RESERVEDBCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-Reserved-B"
  SubnetDBB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref DBBCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-DB-B"
  SubnetPrivB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PRIVBCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-PRIV-B"
  SubnetPubB:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PUBBCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-PUB-B"
  SubnetReservedC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref RESERVEDCCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-Reserved-C"
  SubnetDBC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref DBCCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-DB-C"
  SubnetPrivC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PRIVCCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-PRIV-C"
  SubnetPubC:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PUBCCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SN-PUB-C"
  RTRESERVEDA: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-Reserved-A"
  RTDBA: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-DB-A"
  RTPRIVA: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-PRIV-A"
  RTPUBA: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-PUB-A"
  RTRESERVEDB: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-Reserved-B"
  RTDBB: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-DB-B"
  RTPRIVB: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-PRIV-B"
  RTPUBB: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-PUB-B"
  RTRESERVEDC: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-Reserved-C"
  RTDBC: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-DB-C"
  RTPRIVC: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-PRIV-C"
  RTPUBC: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-RT-PUB-C"
  DefaultRouteIPv4PUBA:
    Type : AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RTPUBA
  DefaultRouteIPv4PUBB:
    Type : AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RTPUBB
  DefaultRouteIPv4PUBC:
    Type : AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RTPUBC
  RTAssociationRESERVEDA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetReservedA
      RouteTableId: !Ref RTRESERVEDA
  RTAssociationDBA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDBA
      RouteTableId: !Ref RTDBA
  RTAssociationPRIVA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivA
      RouteTableId: !Ref RTPRIVA
  RTAssociationPUBA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubA
      RouteTableId: !Ref RTPUBA
  RTAssociationRESERVEDB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetReservedB
      RouteTableId: !Ref RTRESERVEDB
  RTAssociationDBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDBB
      RouteTableId: !Ref RTDBB
  RTAssociationPRIVB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivB
      RouteTableId: !Ref RTPRIVB
  RTAssociationPUBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubB
      RouteTableId: !Ref RTPUBB
  RTAssociationRESERVEDC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetReservedC
      RouteTableId: !Ref RTRESERVEDC
  RTAssociationDBC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDBC
      RouteTableId: !Ref RTDBC
  RTAssociationPRIVC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivC
      RouteTableId: !Ref RTPRIVC
  RTAssociationPUBC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubC
      RouteTableId: !Ref RTPUBC
  ssminterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSSMEndpoints
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref SubnetPrivA
        - !Ref SubnetPrivB
        - !Ref SubnetPrivC
      SecurityGroupIds:
        - !Ref GeneralSGIPv4
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC
  ssmec2messagesinterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSSMEndpoints
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref SubnetPrivA
        - !Ref SubnetPrivB
        - !Ref SubnetPrivC
      SecurityGroupIds:
        - !Ref GeneralSGIPv4
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC
  ssmmessagesinterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSSMEndpoints
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref SubnetPrivA
        - !Ref SubnetPrivB
        - !Ref SubnetPrivC
      SecurityGroupIds:
        - !Ref GeneralSGIPv4
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC
  GeneralSGIPv4:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Default A4L AWS SG
      SecurityGroupIngress: 
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - Description: 'Allow all IPv4 Out'
          CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
  GeneralSGIPv4SelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref GeneralSGIPv4
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref GeneralSGIPv4
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: A4L-NACL-PUBLIC
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: A4L-NACL-PRIVATE
  SubnetNetworkAclAssociationRESERVEDA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetReservedA
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationDBA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDBA
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPrivA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivA
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPubA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPubA
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationRESERVEDB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetReservedB
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationDBB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDBB
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPrivB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivB
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPubB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPubB
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationRESERVEDC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetReservedC
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationDBC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDBC
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPrivC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivC
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPubC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPubC
      NetworkAclId: !Ref NetworkAclPublic
  NACLPubAllowAllIPv4In:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NACLPrivAllowAllIPv4In:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NACLPubAllowAllIPv4Out:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NACLPrivAllowAllIPv4Out:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SessionManagerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
  SessionManagerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SessionManagerRole
  IPv4PublicEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref SessionManagerInstanceProfile
      SubnetId: !Ref SubnetPubA
      SecurityGroupIds: 
        - !Ref GeneralSGIPv4
      Tags:
        - Key: Name
          Value: A4L-IPv4PublicEC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y update
          yum install -y httpd wget git
          cd /tmp
          git clone https://github.com/acantril/aws-advancednetworking-specialty.git
          cp ./aws-advancednetworking-specialty/07_VPC_PUBLIC_NETWORKING/IPv6_Migration/website/* /var/www/html
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          systemctl enable httpd
          systemctl start httpd
  IPv4PrivateEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref SessionManagerInstanceProfile
      SubnetId: !Ref SubnetPrivA
      SecurityGroupIds: 
        - !Ref GeneralSGIPv4
      Tags:
        - Key: Name
          Value: A4L-IPv4PrivateEC2
  IPv4PrivateEC2Ubuntu:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref Ubuntu16AmiId
      IamInstanceProfile: !Ref SessionManagerInstanceProfile
      SubnetId: !Ref SubnetPrivA
      SecurityGroupIds: 
        - !Ref GeneralSGIPv4
      Tags:
        - Key: Name
          Value: A4L-IPv4PrivateEC2Ubuntu

